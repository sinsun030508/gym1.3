package gym;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import java.time.*;
import java.time.temporal.ChronoUnit;

public class MemberinfoFrame extends JFrame {
    private int memberId;
    private Float goalWeight, currentWeight;
    private LocalDate startDate, lastAttendanceDate;
    private int membershipMonths, attendanceDays;
    private JLabel durationLabel, goalWeightLabel, nowWeightLabel, diffLabel, attendanceLabel;
    private LocalDateTime liveStartTime;
    private Timer sessionTimer;

    public MemberinfoFrame(ResultSet rs) throws SQLException {
        setTitle("Ìó¨Ïä§Î©îÏù¥Ìä∏ - ÌöåÏõê Ï†ïÎ≥¥");
        setSize(600, 520);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        // Î©îÏù∏ Î†àÏù¥ÏïÑÏõÉ
        JPanel container = new JPanel(new BorderLayout(10, 10));
        container.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));
        setContentPane(container);

        // DBÏóêÏÑú ÌöåÏõê Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
        memberId = rs.getInt("id");
        String name = rs.getString("name");
        attendanceDays = rs.getInt("attendance_days");
        membershipMonths = rs.getInt("membership_months");
        startDate = rs.getDate("start_date").toLocalDate();
        Date lastDate = rs.getDate("last_attendance_date");
        lastAttendanceDate = (lastDate != null) ? lastDate.toLocalDate() : null;
        goalWeight = rs.getFloat("goal_weight");
        if (rs.wasNull()) goalWeight = null;
        currentWeight = rs.getFloat("current_weight");
        if (rs.wasNull()) currentWeight = null;
        String email = rs.getString("email");

        // ÌöåÏõê Ï†ïÎ≥¥ ÌëúÏãú
        JPanel infoPanel = new JPanel(new GridLayout(0, 1, 5, 5));
        infoPanel.add(label("üë§ Ïù¥Î¶Ñ: " + name));
        infoPanel.add(label("üìß Ïù¥Î©îÏùº: " + email));
        infoPanel.add(label("üìÖ ÎßåÎ£åÍπåÏßÄ: " + ChronoUnit.DAYS.between(LocalDate.now(), startDate.plusMonths(membershipMonths)) + "Ïùº"));

        attendanceLabel = label("‚úÖ Ï∂úÏÑù ÏùºÏàò: " + attendanceDays + "Ïùº");
        infoPanel.add(attendanceLabel);

        goalWeightLabel = label("üéØ Î™©Ìëú Ï≤¥Ï§ë: " + (goalWeight != null ? goalWeight + "kg" : "ÎØ∏ÏÑ§Ï†ï"));
        infoPanel.add(goalWeightLabel);

        nowWeightLabel = label("üìè ÌòÑÏû¨ Ï≤¥Ï§ë: " + (currentWeight != null ? currentWeight + "kg" : "ÎØ∏ÏÑ§Ï†ï"));
        infoPanel.add(nowWeightLabel);

        diffLabel = label(goalWeight != null && currentWeight != null ? getGoalDiffText(currentWeight) : "");
        infoPanel.add(diffLabel);

        durationLabel = label("‚è± Ïò§Îäò Ïù¥Ïö© ÏãúÍ∞Ñ: -");
        infoPanel.add(durationLabel);

        container.add(infoPanel, BorderLayout.CENTER);

        // Ï≤¥Ï§ë ÏûÖÎ†• ÌïÑÎìúÏôÄ Í¥ÄÎ†® Î≤ÑÌäº
        JPanel weightPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        weightPanel.add(new JLabel("Ï≤¥Ï§ë ÏûÖÎ†•:"));
        JTextField weightInput = new JTextField(8);
        weightPanel.add(weightInput);

        JButton goalBtn = new JButton("Î™©Ìëú Ï≤¥Ï§ë");
        JButton nowBtn = new JButton("ÌòÑÏû¨ Ï≤¥Ï§ë");
        weightPanel.add(goalBtn);
        weightPanel.add(nowBtn);
        container.add(weightPanel, BorderLayout.SOUTH);

        // Î≤ÑÌäº ÏòÅÏó≠
        JPanel btnPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 10));
        JButton attendBtn = new JButton("Ï∂úÏÑù");
        JButton startBtn = new JButton("Ïù¥Ïö© ÏãúÏûë");
        JButton endBtn = new JButton("Ïù¥Ïö© Ï¢ÖÎ£å");
        JButton chartBtn = new JButton("Ïù¥Ïö© Í∑∏ÎûòÌîÑ");
        JButton logoutBtn = new JButton("Î°úÍ∑∏ÏïÑÏõÉ");

        btnPanel.add(attendBtn);
        btnPanel.add(startBtn);
        btnPanel.add(endBtn);
        btnPanel.add(chartBtn);
        btnPanel.add(logoutBtn);
        container.add(btnPanel, BorderLayout.NORTH);

        // Î≤ÑÌäº Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨
        attendBtn.addActionListener(e -> markAttendance());
        startBtn.addActionListener(e -> markStart(startBtn, endBtn));
        endBtn.addActionListener(e -> markEnd(startBtn, endBtn));
        goalBtn.addActionListener(e -> setGoalWeight(weightInput.getText()));
        nowBtn.addActionListener(e -> compareWeight(weightInput.getText()));
        chartBtn.addActionListener(e -> new UsageChartFrame(memberId).setVisible(true));
        logoutBtn.addActionListener(e -> {
            if (sessionTimer != null) sessionTimer.stop();
            dispose();
            new Main().setVisible(true);
        });

        initializeUsageState(startBtn, endBtn);
        setVisible(true);
    }

    // Í∏∞Î≥∏ Ïä§ÌÉÄÏùº Ï†ÅÏö©
    private JLabel label(String text) {
        JLabel l = new JLabel(text);
        l.setFont(new Font("ÎßëÏùÄ Í≥†Îîï", Font.PLAIN, 14));
        return l;
    }

    private void initializeUsageState(JButton startBtn, JButton endBtn) {
        try (Connection conn = DBUtil.getConnection()) {
            String sql = "SELECT start_time FROM usage_log WHERE member_id = ? AND end_time IS NULL AND DATE(start_time) = CURDATE() ORDER BY start_time DESC LIMIT 1";
            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, memberId);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                liveStartTime = rs.getTimestamp("start_time").toLocalDateTime();
                startLiveDurationUpdate();
                startBtn.setEnabled(false);
                endBtn.setEnabled(true);
            } else {
                liveStartTime = null;
                if (sessionTimer != null) sessionTimer.stop();
                durationLabel.setText("‚è± Ïò§Îäò Ïù¥Ïö© ÏãúÍ∞Ñ: -");
                startBtn.setEnabled(true);
                endBtn.setEnabled(false);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Ïù¥Ïö© ÏÉÅÌÉú ÌôïÏù∏ Ï§ë Ïò§Î•ò Î∞úÏÉù");
        }
    }

    private void markAttendance() {
        LocalDate today = LocalDate.now();
        if (lastAttendanceDate != null && lastAttendanceDate.equals(today)) {
            JOptionPane.showMessageDialog(this, "Ïò§ÎäòÏùÄ Ïù¥ÎØ∏ Ï∂úÏÑùÌñàÏäµÎãàÎã§!");
            return;
        }

        attendanceDays++;
        lastAttendanceDate = today;

        try (Connection conn = DBUtil.getConnection()) {
            String sql = "UPDATE members SET attendance_days = ?, last_attendance_date = ? WHERE id = ?";
            PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, attendanceDays);
            pstmt.setDate(2, Date.valueOf(today));
            pstmt.setInt(3, memberId);
            pstmt.executeUpdate();

            attendanceLabel.setText("‚úÖ Ï∂úÏÑù ÏùºÏàò: " + attendanceDays + "Ïùº");
            JOptionPane.showMessageDialog(this, "Ï∂úÏÑù ÏôÑÎ£å!");
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "DB Ïò§Î•ò");
        }
    }

    private void markStart(JButton startBtn, JButton endBtn) {
        LocalDate today = LocalDate.now();
        if (lastAttendanceDate == null || !lastAttendanceDate.equals(today)) {
            JOptionPane.showMessageDialog(this, "Î®ºÏ†Ä Ï∂úÏÑùÏùÑ Ìï¥Ï£ºÏÑ∏Ïöî.");
            return;
        }
        if (liveStartTime != null) {
            JOptionPane.showMessageDialog(this, "Ïù¥ÎØ∏ Ïù¥Ïö© Ï§ëÏûÖÎãàÎã§.");
            return;
        }

        liveStartTime = LocalDateTime.now();
        UsageLog.startUsage(memberId, liveStartTime);
        JOptionPane.showMessageDialog(this, "Ïù¥Ïö© ÏãúÏûë Í∏∞Î°ùÎê®.");
        startLiveDurationUpdate();
        startBtn.setEnabled(false);
        endBtn.setEnabled(true);
    }

    private void markEnd(JButton startBtn, JButton endBtn) {
        if (liveStartTime == null) {
            JOptionPane.showMessageDialog(this, "Ïù¥Ïö© ÏãúÏûë ÏÉÅÌÉúÍ∞Ä ÏïÑÎãôÎãàÎã§.");
            return;
        }

        if (sessionTimer != null) sessionTimer.stop();
        LocalDateTime endTime = LocalDateTime.now();
        UsageLog.endUsage(memberId, endTime);

        long minutes = ChronoUnit.MINUTES.between(liveStartTime, endTime);
        long seconds = ChronoUnit.SECONDS.between(liveStartTime, endTime) % 60;
        durationLabel.setText("ÏµúÏ¢Ö Ïù¥Ïö©: " + minutes + "Î∂Ñ " + seconds + "Ï¥à");
        JOptionPane.showMessageDialog(this, "Ïù¥Ïö© Ï¢ÖÎ£å ÏôÑÎ£å");

        liveStartTime = null;
        startBtn.setEnabled(true);
        endBtn.setEnabled(false);
    }

    private void startLiveDurationUpdate() {
        if (sessionTimer != null) sessionTimer.stop();

        sessionTimer = new Timer(1000, e -> {
            if (liveStartTime != null) {
                long minutes = ChronoUnit.MINUTES.between(liveStartTime, LocalDateTime.now());
                long seconds = ChronoUnit.SECONDS.between(liveStartTime, LocalDateTime.now()) % 60;
                durationLabel.setText("‚è± Ïò§Îäò Ïù¥Ïö© ÏãúÍ∞Ñ: " + minutes + "Î∂Ñ " + seconds + "Ï¥à");
            }
        });
        sessionTimer.start();
    }

    private void setGoalWeight(String input) {
        try {
            float weight = Float.parseFloat(input);
            goalWeight = weight;

            try (Connection conn = DBUtil.getConnection()) {
                String sql = "UPDATE members SET goal_weight = ? WHERE id = ?";
                PreparedStatement pstmt = conn.prepareStatement(sql);
                pstmt.setFloat(1, weight);
                pstmt.setInt(2, memberId);
                pstmt.executeUpdate();
            }

            goalWeightLabel.setText("üéØ Î™©Ìëú Ï≤¥Ï§ë: " + weight + "kg");
            diffLabel.setText(currentWeight != null ? getGoalDiffText(currentWeight) : "");
            JOptionPane.showMessageDialog(this, "Î™©Ìëú Ï≤¥Ï§ë ÏÑ§Ï†ï ÏôÑÎ£å");
        } catch (NumberFormatException | SQLException ex) {
            JOptionPane.showMessageDialog(this, "Ïò¨Î∞îÎ•∏ Ïà´ÏûêÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.");
        }
    }

    private void compareWeight(String input) {
        try {
            float nowWeight = Float.parseFloat(input);
            currentWeight = nowWeight;
            nowWeightLabel.setText("üìè ÌòÑÏû¨ Ï≤¥Ï§ë: " + nowWeight + "kg");

            try (Connection conn = DBUtil.getConnection()) {
                String sql = "UPDATE members SET current_weight = ? WHERE id = ?";
                PreparedStatement pstmt = conn.prepareStatement(sql);
                pstmt.setFloat(1, nowWeight);
                pstmt.setInt(2, memberId);
                pstmt.executeUpdate();
            }

            diffLabel.setText(getGoalDiffText(nowWeight));
        } catch (NumberFormatException | SQLException ex) {
            JOptionPane.showMessageDialog(this, "Ïú†Ìö®Ìïú Ï≤¥Ï§ëÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî.");
        }
    }

    private String getGoalDiffText(Float nowWeight) {
        if (goalWeight == null) return "üéØ Î™©Ìëú Ï≤¥Ï§ë ÎØ∏ÏÑ§Ï†ï";
        float diff = nowWeight - goalWeight;
        if (diff == 0f) return "üéâ Î™©Ìëú Ï≤¥Ï§ë Îã¨ÏÑ±!";
        return "üìå Î™©ÌëúÍπåÏßÄ " + String.format("%.1f", Math.abs(diff)) + "kg " + (diff > 0 ? "Í∞êÎüâ ÌïÑÏöî" : "Ï¶ùÍ∞Ä ÌïÑÏöî");
    }
}
